{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet HomeComponent = class HomeComponent {\n  constructor(employeeService) {\n    this.employeeService = employeeService;\n    this.allEmployees = [];\n    this.employees = [];\n    this.employeeService.get().subscribe(data => {\n      this.allEmployees = data;\n      this.totalRecords = this.allEmployees.length;\n      // this.loadPage(0,this.rows); \n    });\n  }\n\n  ngOnInit() {\n    this.cols = [{\n      field: 'emplId',\n      header: 'Employee Id'\n    }, {\n      field: 'Education',\n      header: 'Education'\n    }, {\n      field: 'JoiningYear',\n      header: 'Joining Year'\n    }, {\n      field: 'City',\n      header: 'City'\n    }, {\n      field: 'PaymentTier',\n      header: 'Payment Tier'\n    }, {\n      field: 'Age',\n      header: 'Age'\n    }, {\n      field: 'Gender',\n      header: 'Gender'\n    }, {\n      field: 'EverBenched',\n      header: 'Ever Benched'\n    }, {\n      field: 'ExperienceInCurrentDomain',\n      header: 'Experience In Current Domain'\n    }, {\n      field: 'LeaveOrNot',\n      header: 'Leave Or Not'\n    }\n    // Define other columns here\n    ];\n\n    this.loading = true;\n    // Optionally preload data here or wait for lazy load event\n  }\n\n  loadEmployeesLazy(event) {\n    this.loading = true;\n    // Assuming your service has a method to fetch data with pagination, sort, and filter\n    // The event object contains properties such as first, rows, sortField, sortOrder, filters\n    //this.employeeService.get().subscribe((data:any) => {\n    //  this.employees = data.employees; // Adjust based on your data structure\n    //  this.totalRecords = data.totalRecords; // Adjust based on your data structure\n    //  this.loading = false;\n    //});\n    setTimeout(() => {\n      let loadedEmployees = this.allEmployees.slice(event.first ?? 0, (event.first ?? 0) + (event.rows ?? 0));\n      Array.prototype.splice.apply(this.employees, [event.first ?? 0, event.rows ?? 0, ...loadedEmployees]);\n      this.employees = [...this.employees];\n    }, 1000);\n  }\n};\nHomeComponent = __decorate([Component({\n  selector: 'app-employee-table',\n  templateUrl: './employee-table.component.html',\n  styleUrls: ['./employee-table.component.css']\n})], HomeComponent);\nexport { HomeComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAU1C,IAAMC,aAAa,GAAnB,MAAMA,aAAa;EAOxBC,YAAoBC,eAAgC;IAAhC,oBAAe,GAAfA,eAAe;IANnC,iBAAY,GAAU,EAAE;IACxB,cAAS,GAAU,EAAE;IAMnB,IAAI,CAACA,eAAe,CAACC,GAAG,EAAE,CAACC,SAAS,CAAEC,IAAgB,IAAI;MACxD,IAAI,CAACC,YAAY,GAAGD,IAAI;MACxB,IAAI,CAACE,YAAY,GAAG,IAAI,CAACD,YAAY,CAACE,MAAM;MAC5C;IACF,CAAC,CAAC;EACJ;;EAEAC,QAAQ;IACN,IAAI,CAACC,IAAI,GAAG,CACV;MAAEC,KAAK,EAAE,QAAQ;MAAEC,MAAM,EAAE;IAAa,CAAE,EAC1C;MAAED,KAAK,EAAE,WAAW;MAAEC,MAAM,EAAE;IAAW,CAAE,EAC3C;MAAED,KAAK,EAAE,aAAa;MAAEC,MAAM,EAAE;IAAc,CAAE,EAChD;MAAED,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE;IAAM,CAAE,EACjC;MAAED,KAAK,EAAE,aAAa;MAAEC,MAAM,EAAE;IAAc,CAAE,EAChD;MAAED,KAAK,EAAE,KAAK;MAAEC,MAAM,EAAE;IAAK,CAAE,EAC/B;MAAED,KAAK,EAAE,QAAQ;MAAEC,MAAM,EAAE;IAAQ,CAAE,EACrC;MAAED,KAAK,EAAE,aAAa;MAAEC,MAAM,EAAE;IAAc,CAAE,EAChD;MAAED,KAAK,EAAE,2BAA2B;MAAEC,MAAM,EAAE;IAA8B,CAAE,EAC9E;MAAED,KAAK,EAAE,YAAY;MAAEC,MAAM,EAAE;IAAc;IAC7C;IAAA,CACD;;IACD,IAAI,CAACC,OAAO,GAAG,IAAI;IACnB;EACF;;EAEAC,iBAAiB,CAACC,KAAoB;IACpC,IAAI,CAACF,OAAO,GAAG,IAAI;IACnB;IACA;IACA;IACA;IACA;IACA;IACA;IACAG,UAAU,CAAC,MAAK;MACd,IAAIC,eAAe,GAAG,IAAI,CAACX,YAAY,CAACY,KAAK,CAACH,KAAK,CAACI,KAAK,IAAI,CAAC,EAAG,CAACJ,KAAK,CAACI,KAAK,IAAI,CAAC,KAAKJ,KAAK,CAACK,IAAI,IAAI,CAAC,CAAC,CAAE;MACzGC,KAAK,CAACC,SAAS,CAACC,MAAM,CAACC,KAAK,CAAC,IAAI,CAACC,SAAS,EAAE,CAAEV,KAAK,CAACI,KAAK,IAAI,CAAC,EAAIJ,KAAK,CAACK,IAAI,IAAI,CAAC,EAAG,GAAGH,eAAe,CAAC,CAAC;MACzG,IAAI,CAACQ,SAAS,GAAG,CAAC,GAAG,IAAI,CAACA,SAAS,CAAC;IACtC,CAAC,EAAE,IAAI,CAAC;EACV;CACD;AAhDYzB,aAAa,eALzBD,SAAS,CAAC;EACT2B,QAAQ,EAAE,oBAAoB;EAC9BC,WAAW,EAAE,iCAAiC;EAC9CC,SAAS,EAAE,CAAC,gCAAgC;CAC7C,CAAC,GACW5B,aAAa,CAgDzB;SAhDYA,aAAa","names":["Component","HomeComponent","constructor","employeeService","get","subscribe","data","allEmployees","totalRecords","length","ngOnInit","cols","field","header","loading","loadEmployeesLazy","event","setTimeout","loadedEmployees","slice","first","rows","Array","prototype","splice","apply","employees","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\deekshita.nair\\Downloads\\.NET\\MVCANGULAR\\MVCANGULAR\\ClientApp\\src\\app\\home\\home.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { LazyLoadEvent } from 'primeng/api';\r\nimport { EmployeeService } from './employee.service';\r\nimport { Employee } from './home';\r\n\r\n@Component({\r\n  selector: 'app-employee-table',\r\n  templateUrl: './employee-table.component.html',\r\n  styleUrls: ['./employee-table.component.css']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n  allEmployees: any[] = [];\r\n  employees: any[] = [];\r\n  cols!: any[];\r\n  totalRecords!: number;\r\n  loading!: boolean;\r\n\r\n  constructor(private employeeService: EmployeeService) {\r\n    this.employeeService.get().subscribe((data: Employee[]) => {\r\n      this.allEmployees = data;\r\n      this.totalRecords = this.allEmployees.length;\r\n      // this.loadPage(0,this.rows); \r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.cols = [\r\n      { field: 'emplId', header: 'Employee Id' },\r\n      { field: 'Education', header: 'Education' },\r\n      { field: 'JoiningYear', header: 'Joining Year' },\r\n      { field: 'City', header: 'City' },\r\n      { field: 'PaymentTier', header: 'Payment Tier' },\r\n      { field: 'Age', header: 'Age' },\r\n      { field: 'Gender', header: 'Gender' },\r\n      { field: 'EverBenched', header: 'Ever Benched' },\r\n      { field: 'ExperienceInCurrentDomain', header: 'Experience In Current Domain' },\r\n      { field: 'LeaveOrNot', header: 'Leave Or Not' }\r\n      // Define other columns here\r\n    ];\r\n    this.loading = true;\r\n    // Optionally preload data here or wait for lazy load event\r\n  }\r\n\r\n  loadEmployeesLazy(event: LazyLoadEvent) {\r\n    this.loading = true;\r\n    // Assuming your service has a method to fetch data with pagination, sort, and filter\r\n    // The event object contains properties such as first, rows, sortField, sortOrder, filters\r\n    //this.employeeService.get().subscribe((data:any) => {\r\n    //  this.employees = data.employees; // Adjust based on your data structure\r\n    //  this.totalRecords = data.totalRecords; // Adjust based on your data structure\r\n    //  this.loading = false;\r\n    //});\r\n    setTimeout(() => {\r\n      let loadedEmployees = this.allEmployees.slice(event.first ?? 0, ((event.first ?? 0) + (event.rows ?? 0)));\r\n      Array.prototype.splice.apply(this.employees, [(event.first ?? 0), (event.rows ?? 0), ...loadedEmployees]);\r\n      this.employees = [...this.employees];\r\n    }, 1000);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}